# Scan this file for changes every 30 seconds
refresh_rate: 30 seconds

appenders:
  # An appender named "stdout" that writes to stdout
  stdout:
    kind: console
    encoder:
      # pattern: "{d(%+)(local)} [{t}] {h({l})} {M}:{m}{n}"
      # pattern: "{d(%+)(local)} [{f}-{t}:{L}] {h({l})}: {m}{n}"
      pattern: "{d(%Y-%m-%d %H:%M:%S)(local)} [{f}-{t}:{L}][thread:{T}] {h({l})}: {m}{n}"

  # An appender named "requests" that writes to a file with a custom pattern encoder
  requests:
    kind: file
    path: "/tmp/nta/tns_parse.log"
    encoder:
      # pattern: "{d} - {m}{n}"
      # pattern: "{d(%+)(local)} [{t}] {h({l})} {M}:{m}{n}"
      # pattern: "{d(%+)(local)} [{f}-{t}:{L}] {h({l})} {M}: {m}{n}"
      # pattern: "{d(%+)(local)} [{f}-{t}:{L}][thread:{T}] {h({l})}: {m}{n}"
      # pattern: "{d(%Y-%m-%d %H:%M:%S %Z)(local)} [{f}-{t}:{L}][thread:{T}] {h({l})}: {m}{n}"
      pattern: "{d(%Y-%m-%d %H:%M:%S)(local)} [{f}-{t}:{L}][thread:{T}] {h({l})}: {m}{n}"

  # An appender named "roll" that writes to a file with a custom pattern encoder, limit the size and file number
  roll:
    kind: rolling_file
    path: "/tmp/nta/tns_parse.log"
    encoder:
      # pattern: "{d} - {m}{n}"
      # pattern: "{d(%+)(local)} [{t}] {h({l})} {M}:{m}{n}"
      # pattern: "{d(%+)(local)} [{f}-{t}:{L}] {h({l})} {M}: {m}{n}"
      # pattern: "{d(%+)(local)} [{f}-{t}:{L}][thread:{T}] {h({l})}: {m}{n}"
      # pattern: "{d(%Y-%m-%d %H:%M:%S %Z)(local)} [{f}-{t}:{L}][thread:{T}] {h({l})}: {m}{n}"
      # pattern: "{d(%Y-%m-%d %H:%M:%S %Z)(utc)} [{f}-{t}:{L}][thread:{T}] {h({l})}: {m}{n}"
      pattern: "{d(%Y-%m-%d %H:%M:%S)(local)} [{f}-{t}:{L}][thread:{T}] {h({l})}: {m}{n}"
    policy:
      kind: compound
      trigger:
        kind: size
        limit: 100mb
      roller:
        kind: fixed_window
        pattern: '/tmp/nta/tns_parse.log.{}'
        base: 0
        count: 5
        

# Set the default logging level to "warn" and attach the "stdout" appender to the root
root:
  # level: warn
  # level: debug
  # level: info
  level: error
  appenders:
    # - stdout
    - roll
    # - requests

loggers:
  # Raise the maximum log level for events sent to the "app::backend::db" logger to "info"
  app::backend::db:
    level: info

  # Route log events sent to the "app::requests" logger to the "requests" appender,
  # and *not* the normal appenders installed at the root
  app::requests:
    level: info
    appenders:
    - requests
    additive: false
